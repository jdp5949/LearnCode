Creating a simple Java chat application for a server-client model is a great way to learn about socket programming and network communication. Below are instructions and example code to create a basic chat application that can run on multiple devices within the same network.

**Server Code (Java):**

```java
import java.io.*;
import java.net.*;
import java.util.*;

public class Server {
    private static final int PORT = 12345;
    private static Set<PrintWriter> clientWriters = new HashSet<>();

    public static void main(String[] args) {
        System.out.println("Chat Server is running...");
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                new ClientHandler(serverSocket.accept()).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static class ClientHandler extends Thread {
        private Socket socket;
        private PrintWriter out;
        private BufferedReader in;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                synchronized (clientWriters) {
                    clientWriters.add(out);
                }

                String message;
                while ((message = in.readLine()) != null) {
                    System.out.println("Received: " + message);
                    broadcast(message);
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                synchronized (clientWriters) {
                    clientWriters.remove(out);
                }
            }
        }
    }

    private static void broadcast(String message) {
        synchronized (clientWriters) {
            for (PrintWriter writer : clientWriters) {
                writer.println(message);
            }
        }
    }
}
```

**Client Code (Java):**

```java
import java.io.*;
import java.net.*;
import java.util.Scanner;

public class Client {
    private static final String SERVER_IP = "localhost"; // Change to the server's IP address
    private static final int SERVER_PORT = 12345;

    public static void main(String[] args) {
        try (Socket socket = new Socket(SERVER_IP, SERVER_PORT);
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             Scanner scanner = new Scanner(System.in)) {

            System.out.println("Connected to the server. Enter messages or type 'exit' to quit.");

            Thread receiveThread = new Thread(() -> {
                try {
                    String message;
                    while ((message = in.readLine()) != null) {
                        System.out.println("Server: " + message);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
            receiveThread.start();

            String input;
            while (true) {
                input = scanner.nextLine();
                if ("exit".equalsIgnoreCase(input)) {
                    break;
                }
                out.println(input);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

**Instructions:**

1. Save the server code in a file named `Server.java` and the client code in a file named `Client.java`.

2. Compile both files using the Java compiler. Open a command prompt or terminal and navigate to the directory containing the files. Run the following commands:

   ```bash
   javac Server.java
   javac Client.java
   ```

3. Start the server by running the following command:

   ```bash
   java Server
   ```

   The server will start listening for client connections.

4. Run the client on multiple devices within the same network. Replace `"localhost"` in the `Client` code with the IP address of the machine running the server.

5. Start the client by running the following command on each device:

   ```bash
   java Client
   ```

   You can now chat between multiple clients using the terminal/console.

This is a basic example of a text-based chat application. You can enhance it by adding features like user names, private messaging, and a graphical user interface (GUI). Additionally, consider security and error handling for a production-level chat application.
To create a chat application where multiple clients on your laptop and another laptop can communicate with each other over a network, you'll need to modify the client code to specify the IP address of the server (your laptop's IP address) correctly. Here are the steps:

**On Your Laptop (as the Server):**

1. Determine your laptop's IP address on your local network. You can find this information by opening a command prompt or terminal on your laptop and running the following command:

   ```
   ipconfig      // On Windows
   ```

   OR

   ```
   ifconfig      // On Linux or macOS
   ```

   Look for an IPv4 address in the output (e.g., `192.168.x.x`), which is your laptop's IP address on the local network.

2. Modify the `SERVER_IP` constant in the client code (`Client.java`) to use your laptop's IP address:

   ```java
   private static final String SERVER_IP = "your_laptop_ip_here"; // Replace with your laptop's IP address
   ```

3. Run the server on your laptop:

   ```bash
   java Server
   ```

**On Another Laptop (as a Client):**

1. Open the client code (`Client.java`) on the other laptop.

2. Modify the `SERVER_IP` constant in the client code to use your laptop's IP address (the same one used in the previous step).

   ```java
   private static final String SERVER_IP = "your_laptop_ip_here"; // Replace with your laptop's IP address
   ```

3. Compile and run the client code on the other laptop:

   ```bash
   javac Client.java
   java Client
   ```

4. You should now have both the server and client running on your laptop and the other laptop. They should be able to connect to each other using your laptop's IP address.

5. To communicate between clients, type messages in the client terminals. Messages sent from one client should be received by the other client.

Ensure that both laptops are on the same local network, and the firewalls or security settings on both laptops allow incoming and outgoing connections on the chosen port (e.g., port 12345 in the provided code).

This setup allows communication between the clients on different laptops within the same local network using your laptop as the server.